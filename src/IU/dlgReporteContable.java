/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package IU;

import Componentes.ConexionBD;
import Componentes.Fecha;
import Componentes.Mensajes;
import Componentes.cargarComboBoxMovil;
import Controladores.CabecerasTablas;
import Controladores.controlFactura;
import java.awt.Toolkit;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.mariadb.jdbc.MariaDbConnection;
import org.mariadb.jdbc.MariaDbStatement;

/**
 *
 * @author ADMIN
 */
public class dlgReporteContable extends javax.swing.JDialog {

    public static ResultSet rs;
    public static MariaDbStatement sentencia;
    public static MariaDbConnection con;
    public static MariaDbStatement sentenciaM;
    public static MariaDbConnection conM;
    static String Fdesde;
    static String Fhasta;
    private static int CantidadFila = 0;

    /**
     * Creates new form dlgReporteContable
     */
    public dlgReporteContable(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/Iconos/logo1.png")));
        invisible();
        CabecerasTablas.ContabilidadVenta(tbCV);
        CabecerasTablas.limpiarTablasCV(tbCV);
        Cant();
    }

    private void Cant() {
        lbCant.setText(String.valueOf(tbCV.getRowCount()));
    }

    private void NombreArchivo() {
        String ruc = null;
        try {
            prepararBD();
            String sql = "SELECT ruc FROM empresa WHERE estado='S'";
            ResultSet rss = sentenciaM.executeQuery(sql);
            if (rss.next()) {
                String rucB = rss.getString("ruc");
                Object[] parts = rucB.split("-");
                ruc = parts[0].toString();
            } else {
            }
            rss.close();
            sentencia.close();
            sentenciaM.close();
            con.close();
            conM.close();
        } catch (SQLException e) {
        }
        String fecha = Fecha.formatoSoloMMYYYY(txtFDesde.getText().trim());
        lbNombre.setText(ruc + "_REG_" + fecha.replace("-", "") + "_V0001");
    }

    private void invisible() {
        txtFDesdeR.setVisible(false);
        txtFHastaR.setVisible(false);
        lbPE.setVisible(false);
    }

    public static void prepararBD() {
        {
            try {
                con = (MariaDbConnection) new ConexionBD().getConexion();
                if (con == null) {
                    System.out.println("No hay Conexion con la Base de Datos");
                } else {
                    sentencia = (MariaDbStatement) con.createStatement();
                }
            } catch (SQLException e) {
                System.out.println(e.getMessage());
            }

            try {
                conM = (MariaDbConnection) new ConexionBD().getConexionMovil();
                if (con == null) {
                    System.out.println("No hay Conexion con la Base de Datos MÃ³vil");
                } else {
                    sentenciaM = (MariaDbStatement) conM.createStatement();
                }
            } catch (SQLException e) {
                System.out.println(e.getMessage());
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        Oscuro = new org.edisoncor.gui.panel.PanelImage();
        rSButtonIconOne1 = new RSMaterialComponent.RSButtonIconOne();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        dcFDesde = new datechooser.beans.DateChooserCombo();
        dcFHasta = new datechooser.beans.DateChooserCombo();
        txtFDesde = new javax.swing.JTextField();
        txtFHasta = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lbNombre = new javax.swing.JLabel();
        btnGenerar = new javax.swing.JButton();
        lbPE = new javax.swing.JLabel();
        txtFHastaR = new javax.swing.JTextField();
        txtFDesdeR = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbCV = new javax.swing.JTable();
        btnCSV = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        lbCant = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        Oscuro.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/0-102-102.png"))); // NOI18N
        Oscuro.setPreferredSize(new java.awt.Dimension(690, 418));

        rSButtonIconOne1.setBackground(new java.awt.Color(0, 102, 102));
        rSButtonIconOne1.setBackgroundHover(new java.awt.Color(255, 0, 0));
        rSButtonIconOne1.setIcons(rojeru_san.efectos.ValoresEnum.ICONS.CLOSE);
        rSButtonIconOne1.setOpaque(true);
        rSButtonIconOne1.setPreferredSize(new java.awt.Dimension(20, 20));
        rSButtonIconOne1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rSButtonIconOne1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout OscuroLayout = new javax.swing.GroupLayout(Oscuro);
        Oscuro.setLayout(OscuroLayout);
        OscuroLayout.setHorizontalGroup(
            OscuroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OscuroLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(rSButtonIconOne1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        OscuroLayout.setVerticalGroup(
            OscuroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(rSButtonIconOne1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)), "PARAMETROS A CONSIDERAR", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.BELOW_TOP, new java.awt.Font("Roboto", 1, 10), new java.awt.Color(0, 102, 102))); // NOI18N
        jPanel3.setOpaque(false);

        jLabel1.setFont(new java.awt.Font("Roboto", 0, 10)); // NOI18N
        jLabel1.setText("DESDE:");

        dcFDesde.addCommitListener(new datechooser.events.CommitListener() {
            public void onCommit(datechooser.events.CommitEvent evt) {
                dcFDesdeOnCommit(evt);
            }
        });

        dcFHasta.addCommitListener(new datechooser.events.CommitListener() {
            public void onCommit(datechooser.events.CommitEvent evt) {
                dcFHastaOnCommit(evt);
            }
        });

        txtFDesde.setEditable(false);
        txtFDesde.setBackground(new java.awt.Color(255, 255, 255));
        txtFDesde.setFont(new java.awt.Font("Roboto", 1, 11)); // NOI18N
        txtFDesde.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtFDesde.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        txtFDesde.setEnabled(false);
        txtFDesde.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFDesdeActionPerformed(evt);
            }
        });

        txtFHasta.setEditable(false);
        txtFHasta.setBackground(new java.awt.Color(255, 255, 255));
        txtFHasta.setFont(new java.awt.Font("Roboto", 1, 11)); // NOI18N
        txtFHasta.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtFHasta.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        txtFHasta.setEnabled(false);
        txtFHasta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFHastaActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Roboto", 0, 10)); // NOI18N
        jLabel2.setText("HASTA:");

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setSelected(true);
        jRadioButton1.setText(" 955-Registro Mensual de Comprobantes");
        jRadioButton1.setEnabled(false);
        jRadioButton1.setOpaque(false);

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setText(" 956-Registro Anual de Comprobantes");
        jRadioButton2.setEnabled(false);
        jRadioButton2.setOpaque(false);

        jLabel3.setText("Reporte total de comprobantes emitidos entre fechas:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Nombre del Archivo:");

        btnGenerar.setFont(new java.awt.Font("Roboto", 1, 9)); // NOI18N
        btnGenerar.setForeground(new java.awt.Color(0, 102, 102));
        btnGenerar.setText("CARGAR TABLA DE VENTA");
        btnGenerar.setToolTipText("Registrar Nuevo ArtÃ­culo");
        btnGenerar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnGenerar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnGenerar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarActionPerformed(evt);
            }
        });

        lbPE.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        txtFHastaR.setEditable(false);
        txtFHastaR.setBackground(new java.awt.Color(255, 255, 204));
        txtFHastaR.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11)); // NOI18N
        txtFHastaR.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        txtFDesdeR.setEditable(false);
        txtFDesdeR.setBackground(new java.awt.Color(255, 255, 204));
        txtFDesdeR.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11)); // NOI18N
        txtFDesdeR.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jRadioButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jRadioButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFDesdeR, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFHastaR, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(67, 67, 67)
                        .addComponent(lbPE, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFDesde, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(dcFDesde, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFHasta, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(dcFHasta, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnGenerar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jRadioButton1)
                                .addComponent(jRadioButton2))
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtFDesdeR, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtFHastaR, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lbPE, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(txtFDesde, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(dcFDesde, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(dcFHasta, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(txtFHasta, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(btnGenerar, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(lbNombre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addGap(10, 10, 10))
        );

        jScrollPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        tbCV.setFont(new java.awt.Font("Roboto", 0, 10)); // NOI18N
        tbCV.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbCV.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tbCV.setGridColor(new java.awt.Color(204, 204, 204));
        tbCV.setRowHeight(20);
        tbCV.setShowGrid(true);
        tbCV.setShowVerticalLines(false);
        tbCV.getTableHeader().setResizingAllowed(false);
        tbCV.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tbCV);

        btnCSV.setText("Exportar datos a .csv");
        btnCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCSVActionPerformed(evt);
            }
        });

        jLabel4.setText("Cantidad de registros filtrados: ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Oscuro, javax.swing.GroupLayout.DEFAULT_SIZE, 1204, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1204, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbCant, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnCSV)))
                .addGap(5, 5, 5))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(Oscuro, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 559, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lbCant, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnCSV, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(9, 9, 9))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGenerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarActionPerformed
        // TODO add your handling code here:

        SimpleDateFormat myFecha = new SimpleDateFormat("yyyy/MM/dd");
        Date desde = null;
        Date hasta = null;
        try {
            desde = myFecha.parse(txtFDesde.getText().trim());
            hasta = myFecha.parse(txtFHasta.getText().trim());
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
        if (txtFDesde.getText().trim().isEmpty()) {
            Mensajes.informacion("FIJE LA FECHA DESDE");
        } else if (txtFHasta.getText().trim().isEmpty()) {
            Mensajes.informacion("FIJE LA FECHA HASTA");
        } else if (desde.after(hasta)) {
            Mensajes.error("ERROR EN LOS PARAMETROS FIJADOS.\nVERIFIQUE LAS FECHAS DESDE Y HASTA.");
        } else {
            CabecerasTablas.limpiarTablasCV(tbCV);
            controlFactura.listFacturasMovilContabilidad(tbCV, txtFDesdeR.getText().trim(), txtFHastaR.getText().trim());
            Cant();
        }

    }//GEN-LAST:event_btnGenerarActionPerformed

    private void dcFDesdeOnCommit(datechooser.events.CommitEvent evt) {//GEN-FIRST:event_dcFDesdeOnCommit
        // TODO add your handling code here:
        txtFDesde.setText(Fecha.fechaCFormulario(dcFDesde.getText()));
        txtFDesdeR.setText(Fecha.formatoFecha(dcFDesde.getText()));
        NombreArchivo();
    }//GEN-LAST:event_dcFDesdeOnCommit

    private void dcFHastaOnCommit(datechooser.events.CommitEvent evt) {//GEN-FIRST:event_dcFHastaOnCommit
        // TODO add your handling code here:
        txtFHasta.setText(Fecha.fechaCFormulario(dcFHasta.getText()));
        txtFHastaR.setText(Fecha.formatoFecha(dcFHasta.getText()));
    }//GEN-LAST:event_dcFHastaOnCommit

    private void txtFDesdeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFDesdeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFDesdeActionPerformed

    private void txtFHastaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFHastaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFHastaActionPerformed

    private void btnCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCSVActionPerformed
        // TODO add your handling code here:
        if (tbCV.getRowCount() == 0) {
            Mensajes.Sistema("NO EXISTE DATOS PARA EXPORTAR");
        } else {

            JFileChooser fileChooser = new JFileChooser();
            FileNameExtensionFilter filter = new FileNameExtensionFilter("CSV UTF-8 (delimitado por comas)", "csv");
            fileChooser.setFileFilter(filter);
            fileChooser.setDialogTitle("Guardar archivo");
            fileChooser.setSelectedFile(new File(lbNombre.getText().trim()));

            fileChooser.setAcceptAllFileFilterUsed(false);
            if (fileChooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
                String ruta = fileChooser.getSelectedFile().toString().concat(".csv");
                String ruta1 = fileChooser.getSelectedFile().toString().concat("(1).csv");
                String ruta2 = fileChooser.getSelectedFile().toString().concat("(2).csv");
                String ruta3 = fileChooser.getSelectedFile().toString().concat("(3).csv");
                String ruta4 = fileChooser.getSelectedFile().toString().concat("(4).csv");
                String ruta5 = fileChooser.getSelectedFile().toString().concat("(5).csv");
                String ruta6 = fileChooser.getSelectedFile().toString().concat("(6).csv");
                String ruta7 = fileChooser.getSelectedFile().toString().concat("(7).csv");
                String ruta8 = fileChooser.getSelectedFile().toString().concat("(8).csv");
                String ruta9 = fileChooser.getSelectedFile().toString().concat("(9).csv");
                String ruta10 = fileChooser.getSelectedFile().toString().concat("(10).csv");
                String ruta11 = fileChooser.getSelectedFile().toString().concat("(11).csv");
                String ruta12 = fileChooser.getSelectedFile().toString().concat("(12).csv");
                try {
                    if (tbCV.getRowCount() <= 5000) {
                        try {
                            FileWriter fwU = new FileWriter(ruta);
                            BufferedWriter bwU = new BufferedWriter(fwU);
                            for (int i = 0; i < tbCV.getRowCount(); i++) {
                                for (int j = 0; j < tbCV.getColumnCount(); j++) {
                                    //write
                                    bwU.write(tbCV.getValueAt(i, j).toString() + ";");
                                }
                                bwU.newLine();//record per line 
                            }
                            JOptionPane.showMessageDialog(this, "EL ARCHIVO FUE CREADO EXITOSAMENTE", "INFORMACIÃN", JOptionPane.INFORMATION_MESSAGE);
                            bwU.close();
                            fwU.close();

                        } catch (Exception e) {
                            System.out.println(e.getMessage());
                        }
                    } else {
                        CantidadFila = tbCV.getRowCount();
                        System.out.println("COMENZAMOS EL CONTEO CON " + CantidadFila + "FILAS");
                        if (CantidadFila > 0) {
                            FileWriter fw = new FileWriter(ruta);
                            BufferedWriter bw = new BufferedWriter(fw);
                            for (int i = 0; i < 0 + (CantidadFila - ((5000 - CantidadFila) * (-1))); i++) {
                                for (int j = 0; j < tbCV.getColumnCount(); j++) {
                                    //write
                                    bw.write(tbCV.getValueAt(i, j).toString() + ";");
                                }
                                bw.newLine();//record per line 
                            }
                            bw.close();
                            fw.close();
                            CantidadFila = (CantidadFila - 5000);
                            System.out.println("ahora sobran: " + CantidadFila + "filas");

                            if (CantidadFila > 0) {
                                FileWriter fw1 = new FileWriter(ruta1);
                                BufferedWriter bw1 = new BufferedWriter(fw1);
                                if (CantidadFila >= 5000) {
                                    for (int i = 5000; i < 5000 + (CantidadFila - ((5000 - CantidadFila) * (-1))); i++) {
                                        for (int j = 0; j < tbCV.getColumnCount(); j++) {
                                            //write
                                            bw1.write(tbCV.getValueAt(i, j).toString() + ";");
                                        }
                                        bw1.newLine();//record per line 
                                    }
                                    CantidadFila = (CantidadFila - 5000);
                                    System.out.println("ahora sobran: " + CantidadFila + "filas");
                                } else {
                                    for (int i = 5000; i < 5000 + (CantidadFila); i++) {
                                        for (int j = 0; j < tbCV.getColumnCount(); j++) {
                                            //write
                                            bw1.write(tbCV.getValueAt(i, j).toString() + ";");
                                        }
                                        bw1.newLine();//record per line 
                                    }
                                    CantidadFila = (CantidadFila - 5000);
                                    System.out.println("ahora sobran: " + CantidadFila + "filas");
                                }
                                bw1.close();
                                fw1.close();
                                if (CantidadFila > 0) {
                                    FileWriter fw2 = new FileWriter(ruta2);
                                    BufferedWriter bw2 = new BufferedWriter(fw2);
                                    if (CantidadFila >= 5000) {
                                        for (int i = 10000; i < 10000 + (CantidadFila - ((5000 - CantidadFila) * (-1))); i++) {
                                            for (int j = 0; j < tbCV.getColumnCount(); j++) {
                                                //write
                                                bw2.write(tbCV.getValueAt(i, j).toString() + ";");
                                            }
                                            bw2.newLine();//record per line 
                                        }
                                        CantidadFila = (CantidadFila - 5000);
                                        System.out.println("ahora sobran: " + CantidadFila + "filas");
                                    } else {
                                        for (int i = 10000; i < 10000 + (CantidadFila); i++) {
                                            for (int j = 0; j < tbCV.getColumnCount(); j++) {
                                                //write
                                                bw2.write(tbCV.getValueAt(i, j).toString() + ";");
                                            }
                                            bw2.newLine();//record per line 
                                        }
                                        CantidadFila = (CantidadFila - 5000);
                                        System.out.println("ahora sobran: " + CantidadFila + "filas");
                                    }
                                    bw2.close();
                                    fw2.close();
                                    if (CantidadFila > 0) {
                                        FileWriter fw3 = new FileWriter(ruta3);
                                        BufferedWriter bw3 = new BufferedWriter(fw3);
                                        if (CantidadFila >= 5000) {
                                            for (int i = 15000; i < 15000 + (CantidadFila - ((5000 - CantidadFila) * (-1))); i++) {
                                                for (int j = 0; j < tbCV.getColumnCount(); j++) {
                                                    //write
                                                    bw3.write(tbCV.getValueAt(i, j).toString() + ";");
                                                }
                                                bw3.newLine();//record per line 
                                            }
                                            CantidadFila = (CantidadFila - 5000);
                                            System.out.println("ahora sobran: " + CantidadFila + "filas");
                                        } else {
                                            for (int i = 15000; i < 15000 + (CantidadFila); i++) {
                                                for (int j = 0; j < tbCV.getColumnCount(); j++) {
                                                    //write
                                                    bw3.write(tbCV.getValueAt(i, j).toString() + ";");
                                                }
                                                bw3.newLine();//record per line 
                                            }
                                            CantidadFila = (CantidadFila - 5000);
                                            System.out.println("ahora sobran: " + CantidadFila + "filas");
                                        }
                                        bw3.close();
                                        fw3.close();
                                        if (CantidadFila > 0) {
                                            FileWriter fw4 = new FileWriter(ruta4);
                                            BufferedWriter bw4 = new BufferedWriter(fw4);
                                            if (CantidadFila >= 5000) {
                                                for (int i = 20000; i < 20000 + (CantidadFila - ((5000 - CantidadFila) * (-1))); i++) {
                                                    for (int j = 0; j < tbCV.getColumnCount(); j++) {
                                                        //write
                                                        bw4.write(tbCV.getValueAt(i, j).toString() + ";");
                                                    }
                                                    bw4.newLine();//record per line 
                                                }
                                                CantidadFila = (CantidadFila - 5000);
                                                System.out.println("ahora sobran: " + CantidadFila + "filas");
                                            } else {
                                                for (int i = 20000; i < 20000 + (CantidadFila); i++) {
                                                    for (int j = 0; j < tbCV.getColumnCount(); j++) {
                                                        //write
                                                        bw4.write(tbCV.getValueAt(i, j).toString() + ";");
                                                    }
                                                    bw4.newLine();//record per line 
                                                }
                                                CantidadFila = (CantidadFila - 5000);
                                                System.out.println("ahora sobran: " + CantidadFila + "filas");
                                            }
                                            bw4.close();
                                            fw4.close();
                                            if (CantidadFila > 0) {
                                                FileWriter fw5 = new FileWriter(ruta5);
                                                BufferedWriter bw5 = new BufferedWriter(fw5);
                                                if (CantidadFila >= 5000) {
                                                    for (int i = 25000; i < 25000 + (CantidadFila - ((5000 - CantidadFila) * (-1))); i++) {
                                                        for (int j = 0; j < tbCV.getColumnCount(); j++) {
                                                            //write
                                                            bw5.write(tbCV.getValueAt(i, j).toString() + ";");
                                                        }
                                                        bw5.newLine();//record per line 
                                                    }
                                                    CantidadFila = (CantidadFila - 5000);
                                                    System.out.println("ahora sobran: " + CantidadFila + "filas");
                                                } else {
                                                    for (int i = 25000; i < 25000 + (CantidadFila); i++) {
                                                        for (int j = 0; j < tbCV.getColumnCount(); j++) {
                                                            //write
                                                            bw5.write(tbCV.getValueAt(i, j).toString() + ";");
                                                        }
                                                        bw5.newLine();//record per line 
                                                    }
                                                    CantidadFila = (CantidadFila - 5000);
                                                    System.out.println("ahora sobran: " + CantidadFila + "filas");
                                                }
                                                bw5.close();
                                                fw5.close();
                                                if (CantidadFila > 0) {
                                                    FileWriter fw6 = new FileWriter(ruta6);
                                                    BufferedWriter bw6 = new BufferedWriter(fw6);
                                                    if (CantidadFila >= 5000) {
                                                        for (int i = 30000; i < 30000 + (CantidadFila - ((5000 - CantidadFila) * (-1))); i++) {
                                                            for (int j = 0; j < tbCV.getColumnCount(); j++) {
                                                                //write
                                                                bw6.write(tbCV.getValueAt(i, j).toString() + ";");
                                                            }
                                                            bw6.newLine();//record per line 
                                                        }
                                                        CantidadFila = (CantidadFila - 5000);
                                                        System.out.println("ahora sobran: " + CantidadFila + "filas");
                                                    } else {
                                                        for (int i = 30000; i < 30000 + (CantidadFila); i++) {
                                                            for (int j = 0; j < tbCV.getColumnCount(); j++) {
                                                                //write
                                                                bw6.write(tbCV.getValueAt(i, j).toString() + ";");
                                                            }
                                                            bw6.newLine();//record per line 
                                                        }
                                                        CantidadFila = (CantidadFila - 5000);
                                                        System.out.println("ahora sobran: " + CantidadFila + "filas");
                                                    }
                                                    bw6.close();
                                                    fw6.close();
                                                    if (CantidadFila > 0) {
                                                        FileWriter fw7 = new FileWriter(ruta7);
                                                        BufferedWriter bw7 = new BufferedWriter(fw7);
                                                        if (CantidadFila >= 5000) {
                                                            for (int i = 35000; i < 35000 + (CantidadFila - ((5000 - CantidadFila) * (-1))); i++) {
                                                                for (int j = 0; j < tbCV.getColumnCount(); j++) {
                                                                    //write
                                                                    bw7.write(tbCV.getValueAt(i, j).toString() + ";");
                                                                }
                                                                bw7.newLine();//record per line 
                                                            }
                                                            CantidadFila = (CantidadFila - 5000);
                                                            System.out.println("ahora sobran: " + CantidadFila + "filas");
                                                        } else {
                                                            for (int i = 35000; i < 35000 + (CantidadFila); i++) {
                                                                for (int j = 0; j < tbCV.getColumnCount(); j++) {
                                                                    //write
                                                                    bw7.write(tbCV.getValueAt(i, j).toString() + ";");
                                                                }
                                                                bw7.newLine();//record per line 
                                                            }
                                                            CantidadFila = (CantidadFila - 5000);
                                                            System.out.println("ahora sobran: " + CantidadFila + "filas");
                                                        }
                                                        bw7.close();
                                                        fw7.close();
                                                        if (CantidadFila > 0) {
                                                            FileWriter fw8 = new FileWriter(ruta8);
                                                            BufferedWriter bw8 = new BufferedWriter(fw8);
                                                            if (CantidadFila >= 5000) {
                                                                for (int i = 40000; i < 40000 + (CantidadFila - ((5000 - CantidadFila) * (-1))); i++) {
                                                                    for (int j = 0; j < tbCV.getColumnCount(); j++) {
                                                                        //write
                                                                        bw8.write(tbCV.getValueAt(i, j).toString() + ";");
                                                                    }
                                                                    bw8.newLine();//record per line 
                                                                }
                                                                CantidadFila = (CantidadFila - 5000);
                                                                System.out.println("ahora sobran: " + CantidadFila + "filas");
                                                            } else {
                                                                for (int i = 40000; i < 40000 + (CantidadFila); i++) {
                                                                    for (int j = 0; j < tbCV.getColumnCount(); j++) {
                                                                        //write
                                                                        bw8.write(tbCV.getValueAt(i, j).toString() + ";");
                                                                    }
                                                                    bw8.newLine();//record per line 
                                                                }
                                                                CantidadFila = (CantidadFila - 5000);
                                                                System.out.println("ahora sobran: " + CantidadFila + "filas");
                                                            }
                                                            bw8.close();
                                                            fw8.close();
                                                            if (CantidadFila > 0) {
                                                                FileWriter fw9 = new FileWriter(ruta9);
                                                                BufferedWriter bw9 = new BufferedWriter(fw9);
                                                                if (CantidadFila >= 5000) {
                                                                    for (int i = 45000; i < 45000 + (CantidadFila - ((5000 - CantidadFila) * (-1))); i++) {
                                                                        for (int j = 0; j < tbCV.getColumnCount(); j++) {
                                                                            //write
                                                                            bw9.write(tbCV.getValueAt(i, j).toString() + ";");
                                                                        }
                                                                        bw9.newLine();//record per line 
                                                                    }
                                                                    CantidadFila = (CantidadFila - 5000);
                                                                    System.out.println("ahora sobran: " + CantidadFila + "filas");
                                                                } else {
                                                                    for (int i = 45000; i < 45000 + (CantidadFila); i++) {
                                                                        for (int j = 0; j < tbCV.getColumnCount(); j++) {
                                                                            //write
                                                                            bw9.write(tbCV.getValueAt(i, j).toString() + ";");
                                                                        }
                                                                        bw9.newLine();//record per line 
                                                                    }
                                                                    CantidadFila = (CantidadFila - 5000);
                                                                    System.out.println("ahora sobran: " + CantidadFila + "filas");
                                                                }
                                                                bw9.close();
                                                                fw9.close();
                                                                if (CantidadFila > 0) {
                                                                    FileWriter fw10 = new FileWriter(ruta10);
                                                                    BufferedWriter bw10 = new BufferedWriter(fw10);
                                                                    if (CantidadFila >= 5000) {
                                                                        for (int i = 50000; i < 50000 + (CantidadFila - ((5000 - CantidadFila) * (-1))); i++) {
                                                                            for (int j = 0; j < tbCV.getColumnCount(); j++) {
                                                                                //write
                                                                                bw10.write(tbCV.getValueAt(i, j).toString() + ";");
                                                                            }
                                                                            bw10.newLine();//record per line 
                                                                        }
                                                                        CantidadFila = (CantidadFila - 5000);
                                                                        System.out.println("ahora sobran: " + CantidadFila + "filas");
                                                                    } else {
                                                                        for (int i = 50000; i < 50000 + (CantidadFila); i++) {
                                                                            for (int j = 0; j < tbCV.getColumnCount(); j++) {
                                                                                //write
                                                                                bw10.write(tbCV.getValueAt(i, j).toString() + ";");
                                                                            }
                                                                            bw10.newLine();//record per line 
                                                                        }
                                                                        CantidadFila = (CantidadFila - 5000);
                                                                        System.out.println("ahora sobran: " + CantidadFila + "filas");
                                                                    }
                                                                    bw10.close();
                                                                    fw10.close();
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    /*FileWriter fw = new FileWriter(ruta);
                    BufferedWriter bw = new BufferedWriter(fw);
                    for (int i = 0; i < tbCV.getRowCount(); i++) {
                        for (int j = 0; j < tbCV.getColumnCount(); j++) {
                            //write
                            bw.write(tbCV.getValueAt(i, j).toString() + ";");
                        }
                        bw.newLine();//record per line 
                    }*/
                    //JOptionPane.showMessageDialog(this, "EL ARCHIVO FUE CREADO EXITOSAMENTE", "INFORMACIÃN", JOptionPane.INFORMATION_MESSAGE);
                    //bw.close();
                    //fw.close();
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(this, "ERROR: " + ex.getMessage(), "ERROR MESSAGE", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_btnCSVActionPerformed

    private void rSButtonIconOne1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rSButtonIconOne1ActionPerformed
        // TODO add your handling code here:
        int rpta = Mensajes.confirmar("Â¿Seguro que desea salir del formulario?");
        if (rpta == 0) {
            this.dispose();
        }
    }//GEN-LAST:event_rSButtonIconOne1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(dlgReporteContable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(dlgReporteContable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(dlgReporteContable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(dlgReporteContable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                dlgReporteContable dialog = new dlgReporteContable(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.edisoncor.gui.panel.PanelImage Oscuro;
    private javax.swing.JButton btnCSV;
    private javax.swing.JButton btnGenerar;
    private javax.swing.ButtonGroup buttonGroup1;
    public static datechooser.beans.DateChooserCombo dcFDesde;
    public static datechooser.beans.DateChooserCombo dcFHasta;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lbCant;
    private javax.swing.JLabel lbNombre;
    private javax.swing.JLabel lbPE;
    private RSMaterialComponent.RSButtonIconOne rSButtonIconOne1;
    private javax.swing.JTable tbCV;
    public static javax.swing.JTextField txtFDesde;
    public static javax.swing.JTextField txtFDesdeR;
    public static javax.swing.JTextField txtFHasta;
    public static javax.swing.JTextField txtFHastaR;
    // End of variables declaration//GEN-END:variables
}
